# settings.py - COMPLETE FIXED VERSION
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QFormLayout,
                             QLabel, QComboBox, QSpinBox, QDoubleSpinBox, 
                             QCheckBox, QGroupBox, QPushButton, QFrame,
                             QScrollArea, QListWidget, QListWidgetItem)
from PyQt5.QtCore import Qt

class SettingsWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.selected_pairs = []
        self.init_ui()
        
    def init_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π layout —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        content_widget = QWidget()
        self.layout = QVBoxLayout(content_widget)
        self.layout.setSpacing(25)
        self.layout.setContentsMargins(20, 20, 20, 20)
        
        # –í—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        self.create_pair_selection()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.create_trading_settings()
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        self.create_data_management()
        
        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.create_action_buttons()
        
        scroll.setWidget(content_widget)
        
        main_layout = QVBoxLayout(self)
        main_layout.addWidget(scroll)
        
    def create_pair_selection(self):
        group = QGroupBox("üìä –í—ã–±–æ—Ä –¢–æ—Ä–≥–æ–≤—ã—Ö –ü–∞—Ä (–º–∞–∫—Å. 10)")
        group_layout = QVBoxLayout(group)
        
        info_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:")
        info_label.setStyleSheet("color: #B0B0B0; font-size: 14px; margin-bottom: 10px;")
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä
        self.pairs_list = QListWidget()
        
        available_pairs = [
            "BTC/USDT:USDT", "ETH/USDT:USDT", "SOL/USDT:USDT", 
            "BNB/USDT:USDT", "XRP/USDT:USDT", "ADA/USDT:USDT",
            "AVAX/USDT:USDT", "DOGE/USDT:USDT", "DOT/USDT:USDT", 
            "LINK/USDT:USDT", "MATIC/USDT:USDT", "LTC/USDT:USDT",
            "ATOM/USDT:USDT", "ETC/USDT:USDT", "BCH/USDT:USDT",
            "FIL/USDT:USDT", "NEAR/USDT:USDT", "ALGO/USDT:USDT"
        ]
        
        for pair in available_pairs:
            item = QListWidgetItem(pair)
            item.setCheckState(Qt.Unchecked)
            self.pairs_list.addItem(item)
        
        self.pairs_list.itemChanged.connect(self.update_selected_pairs)
        
        # –°—Ç–∞—Ç—É—Å –≤—ã–±–æ—Ä–∞
        self.selection_status = QLabel("–í—ã–±—Ä–∞–Ω–æ –ø–∞—Ä: 0/10")
        self.selection_status.setStyleSheet("color: #56ABFF; font-weight: 600; font-size: 14px;")
        
        group_layout.addWidget(info_label)
        group_layout.addWidget(self.pairs_list)
        group_layout.addWidget(self.selection_status)
        
        self.layout.addWidget(group)
        
    def create_trading_settings(self):
        group = QGroupBox("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¢–æ—Ä–≥–æ–≤–ª–∏")
        group_layout = QVBoxLayout(group)
        
        form_layout = QFormLayout()
        form_layout.setLabelAlignment(Qt.AlignRight)
        form_layout.setVerticalSpacing(15)
        form_layout.setHorizontalSpacing(20)
        
        # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        self.position_size_spin = QDoubleSpinBox()
        self.position_size_spin.setRange(5, 50)
        self.position_size_spin.setValue(15)
        self.position_size_spin.setSuffix("% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞")
        self.position_size_spin.setSingleStep(1)
        
        # –ü–ª–µ—á–æ
        self.leverage_spin = QSpinBox()
        self.leverage_spin.setRange(1, 20)
        self.leverage_spin.setValue(5)
        self.leverage_spin.setSuffix("x")
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_interval_combo = QComboBox()
        self.analysis_interval_combo.addItems([
            "15 –º–∏–Ω—É—Ç",
            "30 –º–∏–Ω—É—Ç", 
            "1 —á–∞—Å",
            "2 —á–∞—Å–∞"
        ])
        self.analysis_interval_combo.setCurrentText("30 –º–∏–Ω—É—Ç")
        
        form_layout.addRow("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:", self.position_size_spin)
        form_layout.addRow("–ü–ª–µ—á–æ:", self.leverage_spin)
        form_layout.addRow("–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞:", self.analysis_interval_combo)
        
        group_layout.addLayout(form_layout)
        self.layout.addWidget(group)
        
    def create_data_management(self):
        group = QGroupBox("üóÉÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–∞–Ω–Ω—ã–º–∏ –∏ –õ–æ–≥–∞–º–∏")
        group_layout = QVBoxLayout(group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        data_layout = QVBoxLayout()
        data_layout.setSpacing(15)
        
        self.auto_cleanup_check = QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        self.auto_cleanup_check.setChecked(True)
        
        self.save_logs_check = QCheckBox("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏")
        self.save_logs_check.setChecked(True)
        
        self.export_reports_check = QCheckBox("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ CSV")
        self.export_reports_check.setChecked(True)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
        buttons_layout = QHBoxLayout()
        
        clear_data_btn = QPushButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        clear_data_btn.setObjectName("danger")
        clear_data_btn.setFixedSize(180, 40)
        clear_data_btn.clicked.connect(self.clear_knowledge_base)
        
        export_data_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
        export_data_btn.setFixedSize(180, 40)
        export_data_btn.clicked.connect(self.export_data)
        
        buttons_layout.addWidget(clear_data_btn)
        buttons_layout.addWidget(export_data_btn)
        buttons_layout.addStretch()
        
        data_layout.addWidget(self.auto_cleanup_check)
        data_layout.addWidget(self.save_logs_check)
        data_layout.addWidget(self.export_reports_check)
        data_layout.addSpacing(10)
        data_layout.addLayout(buttons_layout)
        
        group_layout.addLayout(data_layout)
        self.layout.addWidget(group)
        
    def create_action_buttons(self):
        buttons_frame = QFrame()
        buttons_layout = QHBoxLayout(buttons_frame)
        
        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        save_btn.setObjectName("success")
        save_btn.setFixedSize(200, 50)
        save_btn.clicked.connect(self.save_settings)
        
        reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        reset_btn.setFixedSize(160, 50)
        reset_btn.clicked.connect(self.reset_settings)
        
        buttons_layout.addStretch()
        buttons_layout.addWidget(reset_btn)
        buttons_layout.addWidget(save_btn)
        
        self.layout.addWidget(buttons_frame)
        
    def update_selected_pairs(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä"""
        self.selected_pairs = []
        for i in range(self.pairs_list.count()):
            item = self.pairs_list.item(i)
            if item.checkState() == Qt.Checked:
                self.selected_pairs.append(item.text())
        
        count = len(self.selected_pairs)
        self.selection_status.setText(f"–í—ã–±—Ä–∞–Ω–æ –ø–∞—Ä: {count}/10")
        
        if count > 10:
            self.selection_status.setStyleSheet("color: #FF6B6B; font-weight: 600; font-size: 14px;")
        else:
            self.selection_status.setStyleSheet("color: #56ABFF; font-weight: 600; font-size: 14px;")
        
    def clear_knowledge_base(self):
        """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        print("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
        
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if len(self.selected_pairs) > 10:
            print("–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ 10 –ø–∞—Ä")
            return
            
        settings = {
            'trading_pairs': self.selected_pairs,
            'position_size': self.position_size_spin.value(),
            'leverage': self.leverage_spin.value(),
            'analysis_interval': self.analysis_interval_combo.currentText(),
            'auto_cleanup': self.auto_cleanup_check.isChecked(),
            'save_logs': self.save_logs_check.isChecked(),
            'export_reports': self.export_reports_check.isChecked()
        }
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", settings)
        
    def reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ø–∞—Ä
        for i in range(self.pairs_list.count()):
            item = self.pairs_list.item(i)
            item.setCheckState(Qt.Unchecked)
        
        # –°–±—Ä–æ—Å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.position_size_spin.setValue(15)
        self.leverage_spin.setValue(5)
        self.analysis_interval_combo.setCurrentText("30 –º–∏–Ω—É—Ç")
        self.auto_cleanup_check.setChecked(True)
        self.save_logs_check.setChecked(True)
        self.export_reports_check.setChecked(True)
