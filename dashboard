# dashboard.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
                             QLabel, QFrame, QProgressBar, QSizePolicy)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont, QColor
from PyQt5.QtWidgets import QGraphicsDropShadowEffect

class ResponsiveMetricWidget(QFrame):
    def __init__(self, title, value, change=None, change_type="neutral"):
        super().__init__()
        self.setObjectName("metric-card")
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.setMinimumHeight(110)
        self.setMaximumHeight(140)

        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ç–µ–Ω—å
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(20)
        shadow.setColor(QColor(0, 0, 0, 50))
        shadow.setOffset(0, 5)
        self.setGraphicsEffect(shadow)

        layout = QVBoxLayout(self)
        layout.setContentsMargins(18, 18, 18, 18)
        layout.setSpacing(10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(title)
        title_label.setObjectName("metric-label")
        title_label.setAlignment(Qt.AlignLeft)
        title_label.setWordWrap(True)

        # –ó–Ω–∞—á–µ–Ω–∏–µ - –£–í–ï–õ–ò–ß–ï–ù–ù–´–ô –®–†–ò–§–¢
        self.value_label = QLabel(value)
        self.value_label.setObjectName("metric-value-large")  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ large
        self.value_label.setAlignment(Qt.AlignLeft)
        self.value_label.setMinimumHeight(35)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        change_layout = QHBoxLayout()

        self.change_label = QLabel()
        if change:
            self.change_label.setText(change)
            if change_type == "positive":
                self.change_label.setObjectName("metric-change-positive")
            elif change_type == "negative":
                self.change_label.setObjectName("metric-change-negative")

        change_layout.addWidget(self.change_label)
        change_layout.addStretch()

        layout.addWidget(title_label)
        layout.addWidget(self.value_label)
        if change:
            layout.addLayout(change_layout)

        layout.addStretch()

class DashboardWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.bot_running = False
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(25)

        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ - –£–ë–†–ê–ù–ê –ü–û–õ–û–°–ê –ó–ê–ì–†–£–ó–ö–ò
        self.create_status_section(layout)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.create_responsive_metrics(layout)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.create_info_section(layout)

    def create_status_section(self, parent_layout):
        status_frame = QFrame()
        status_frame.setObjectName("glass-card")
        status_frame.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        status_frame.setMinimumHeight(80)

        status_layout = QHBoxLayout(status_frame)
        status_layout.setContentsMargins(25, 20, 25, 20)

        # –°—Ç–∞—Ç—É—Å
        status_left = QVBoxLayout()
        self.status_label = QLabel("üî¥ –°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê")
        self.status_label.setStyleSheet("""
            color: #FF6B6B; 
            font-size: 18px;
            font-weight: 700;
        """)

        status_subtitle = QLabel("AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
        status_subtitle.setStyleSheet("color: #B0B0B0; font-size: 14px;")

        status_left.addWidget(self.status_label)
        status_left.addWidget(status_subtitle)

        # –£–ë–†–ê–ù–ê –ü–û–õ–û–°–ê –ü–†–û–ì–†–ï–°–°–ê "–î–æ –∞–Ω–∞–ª–∏–∑–∞:"
        # –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        analysis_layout = QVBoxLayout()
        analysis_label = QLabel("–°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑:")
        analysis_label.setStyleSheet("color: #B0B0B0; font-size: 14px; font-weight: 500;")

        self.next_analysis_label = QLabel("30 –º–∏–Ω")
        self.next_analysis_label.setStyleSheet("""
            color: #56ABFF; 
            font-size: 24px;  /* –£–í–ï–õ–ò–ß–ï–ù–ù–´–ô –®–†–ò–§–¢ */
            font-weight: 700;
        """)

        analysis_layout.addWidget(analysis_label)
        analysis_layout.addWidget(self.next_analysis_label)

        status_layout.addLayout(status_left)
        status_layout.addStretch()
        status_layout.addLayout(analysis_layout)

        parent_layout.addWidget(status_frame)

    def create_responsive_metrics(self, parent_layout):
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–æ–π
        self.metrics_container = QWidget()
        self.metrics_layout = QGridLayout(self.metrics_container)
        self.metrics_layout.setSpacing(20)
        self.metrics_layout.setContentsMargins(0, 0, 0, 0)

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self.create_metrics()

        parent_layout.addWidget(self.metrics_container)

    def create_metrics(self):
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        for i in reversed(range(self.metrics_layout.count())): 
            widget = self.metrics_layout.itemAt(i).widget()
            if widget:
                widget.setParent(None)

        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –£–í–ï–õ–ò–ß–ï–ù–ù–´–ú–ò –®–†–ò–§–¢–ê–ú–ò
        self.balance_metric = ResponsiveMetricWidget(
            "–û–ë–©–ò–ô –ë–ê–õ–ê–ù–°", 
            "12,543.21 $"
        )

        self.available_metric = ResponsiveMetricWidget(
            "–î–û–°–¢–£–ü–ù–´–ï –°–†–ï–î–°–¢–í–ê", 
            "8,432.15 $"
        )

        self.pnl_metric = ResponsiveMetricWidget(
            "P&L", 
            "+324.56 $", 
            "+2.65%", 
            "positive"
        )

        self.positions_metric = ResponsiveMetricWidget(
            "–ü–û–ó–ò–¶–ò–ò", 
            "3"
        )

        self.orders_metric = ResponsiveMetricWidget(
            "–û–†–î–ï–†–ê", 
            "2"
        )

        self.daily_trades_metric = ResponsiveMetricWidget(
            "–°–î–ï–õ–ö–ò –°–ï–ì–û–î–ù–Ø", 
            "4/5"
        )

        self.total_trades_metric = ResponsiveMetricWidget(
            "–í–°–ï–ì–û –°–î–ï–õ–û–ö", 
            "47"
        )

        self.architecture_metric = ResponsiveMetricWidget(
            "–ê–†–•–ò–¢–ï–ö–¢–£–†–ê", 
            "v2.4"
        )

        self.next_analysis_metric = ResponsiveMetricWidget(
            "–°–õ–ï–î. –ê–ù–ê–õ–ò–ó", 
            "25 –º–∏–Ω"
        )

        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–∏–Ω—ã
        self.update_metrics_layout()

    def update_metrics_layout(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–∏–Ω—ã –æ–∫–Ω–∞"""
        # –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
        for i in reversed(range(self.metrics_layout.count())): 
            widget = self.metrics_layout.itemAt(i).widget()
            if widget:
                self.metrics_layout.removeWidget(widget)

        all_metrics = [
            self.balance_metric, self.available_metric, self.pnl_metric,
            self.positions_metric, self.orders_metric, self.daily_trades_metric,
            self.total_trades_metric, self.architecture_metric, self.next_analysis_metric
        ]

        width = self.width() if self.width() > 0 else 1000

        if width >= 1200:
            # 3 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —à–∏—Ä–æ–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
            cols = 3
        elif width >= 800:
            # 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
            cols = 2
        else:
            # 1 –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —É–∑–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
            cols = 1

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å–µ—Ç–∫–µ
        row, col = 0, 0
        for metric in all_metrics:
            self.metrics_layout.addWidget(metric, row, col)
            col += 1
            if col >= cols:
                col = 0
                row += 1

    def resizeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        super().resizeEvent(event)
        self.update_metrics_layout()

    def create_info_section(self, parent_layout):
        info_frame = QFrame()
        info_frame.setObjectName("glass-card")
        info_layout = QVBoxLayout(info_frame)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        info_title = QLabel("üìä –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò")
        info_title.setStyleSheet("""
            color: #FFFFFF; 
            font-size: 18px;
            font-weight: 700;
            padding: 12px 0px;
        """)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö
        positions_info = QLabel(
            "ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n\n"
            "–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:\n"
            "‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n‚Ä¢ –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–æ–≤\n‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        )
        positions_info.setAlignment(Qt.AlignCenter)
        positions_info.setStyleSheet("""
            color: #B0B0B0; 
            font-size: 15px;
            padding: 50px 25px;
            background: rgba(255,255,255,0.03);
            border-radius: 12px;
            border: 2px dashed rgba(255,255,255,0.1);
            line-height: 1.8;
        """)
        positions_info.setWordWrap(True)
        positions_info.setMinimumHeight(200)

        info_layout.addWidget(info_title)
        info_layout.addWidget(positions_info)

        parent_layout.addWidget(info_frame)

    def set_bot_running(self, running):
        self.bot_running = running
        if running:
            self.status_label.setText("üü¢ –¢–û–†–ì–û–í–õ–Ø –ê–ö–¢–ò–í–ù–ê")
            self.status_label.setStyleSheet("""
                color: #00D4AA; 
                font-size: 18px;
                font-weight: 700;
            """)
        else:
            self.status_label.setText("üî¥ –°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê")
            self.status_label.setStyleSheet("""
                color: #FF6B6B; 
                font-size: 18px;
                font-weight: 700;
            """)

    def update_dashboard_data(self, data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ"""
        if not self.bot_running:
            return

        self.balance_metric.value_label.setText(f"{data['total_balance']:,.2f} $")
        self.available_metric.value_label.setText(f"{data['available_balance']:,.2f} $")

        # P&L —Å —Ü–≤–µ—Ç–æ–º
        pnl = data['unrealized_pnl']
        pnl_text = f"{'+' if pnl >= 0 else ''}{pnl:,.2f} $"
        pnl_percent = (pnl / data['total_balance']) * 100 if data['total_balance'] > 0 else 0
        percent_text = f"{pnl_percent:+.2f}%"

        self.pnl_metric.value_label.setText(pnl_text)
        self.pnl_metric.change_label.setText(percent_text)

        if pnl >= 0:
            self.pnl_metric.change_label.setObjectName("metric-change-positive")
            self.pnl_metric.change_label.style().unpolish(self.pnl_metric.change_label)
            self.pnl_metric.change_label.style().polish(self.pnl_metric.change_label)
        else:
            self.pnl_metric.change_label.setObjectName("metric-change-negative")
            self.pnl_metric.change_label.style().unpolish(self.pnl_metric.change_label)
            self.pnl_metric.change_label.style().polish(self.pnl_metric.change_label)

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.positions_metric.value_label.setText(str(data['positions_count']))
        self.orders_metric.value_label.setText(str(data['orders_count']))
        self.daily_trades_metric.value_label.setText(data['daily_trades'])
        self.total_trades_metric.value_label.setText(str(data['total_trades']))
        self.next_analysis_metric.value_label.setText(data['next_analysis'])
        self.next_analysis_label.setText(data['next_analysis'])
